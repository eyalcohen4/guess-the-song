# http:#eslint.org/docs/rules/

# GLOBALS
#
# add project-specific global identifiers here in the form of:
# <identifier>: true
#
# globals:
#     angular: true

globals:

# PLUGINS

plugins: [
]

# RULES

ecmaFeatures:
    binaryLiterals: false                    # enable binary literals
    blockBindings: false                     # enable let and const (aka block bindings)
    defaultParams: false                     # enable default function parameters
    forOf: false                             # enable for-of loops
    generators: false                        # enable generators
    objectLiteralComputedProperties: false   # enable computed object literal property names
    objectLiteralDuplicateProperties: false  # enable duplicate object literal properties in strict mode
    objectLiteralShorthandMethods: false     # enable object literal shorthand methods
    objectLiteralShorthandProperties: false  # enable object literal shorthand properties
    octalLiterals: false                     # enable octal literals
    regexUFlag: false                        # enable the regular expression u flag
    regexYFlag: false                        # enable the regular expression y flag
    templateStrings: false                   # enable template strings
    unicodeCodePointEscapes: false           # enable code point escapes
    jsx: false                               # enable JSX

env:
    browser: true      # browser global variables.
    node: false        # Node.js global variables and Node.js-specific rules.
    amd: false         # defines require() and define() as global variables as per the amd spec.
    mocha: false       # adds all of the Mocha testing global variables.
    jasmine: false     # adds all of the Jasmine testing global variables for version 1.3 and 2.0.
    phantomjs: false   # phantomjs global variables.
    jquery: true       # jquery global variables.
    prototypejs: false # prototypejs global variables.
    shelljs: false     # shelljs global variables.

rules:

    ##### Possible Errors #####

    comma-dangle: 2             # disallow trailing commas in object literals
    no-cond-assign: 2           # disallow assignment in conditional expressions
    no-console: 0               # disallow use of console (off by default in the node environment)
    no-constant-condition: 2    # disallow use of constant expressions in conditions
    no-control-regex: 2         # disallow control characters in regular expressions
    no-debugger: 0              # disallow use of debugger
    no-dupe-args: 2             # disallow duplicate arguments in functions
    no-dupe-keys: 2             # disallow duplicate keys when creating object literals
    no-duplicate-case: 2        # disallow a duplicate case label
    no-empty-character-class: 2 # disallow the use of empty character classes in regular expressions
    no-empty: 2                 # disallow empty statements
    no-ex-assign: 2             # disallow assigning to the exception in a catch block
    no-extra-boolean-cast: 0    # disallow double-negation boolean casts in a boolean context
    no-extra-parens: 0          # disallow unnecessary parentheses (off by default)
    no-extra-semi: 2            # disallow unnecessary semicolons
    no-func-assign: 2           # disallow overwriting functions written as function declarations
    no-inner-declarations: 0    # disallow function or variable declarations in nested blocks
    no-invalid-regexp: 2        # disallow invalid regular expression strings in the RegExp constructor
    no-irregular-whitespace: 2  # disallow irregular whitespace outside of strings and comments
    no-negated-in-lhs: 2        # disallow negation of the left operand of an in expression
    no-obj-calls: 2             # disallow the use of object properties of the global object (Math and JSON) as functions
    no-regex-spaces: 0          # disallow multiple spaces in a regular expression literal
    no-sparse-arrays: 2         # disallow sparse arrays
    no-unreachable: 2           # disallow unreachable statements after a return throw continue or break statement
    use-isnan: 2                # disallow comparisons with the value NaN
    valid-jsdoc: 0              # Ensure JSDoc comments are valid (off by default)
    valid-typeof: 2             # Ensure that the results of typeof are compared against a valid string

    ##### Best Practices #####

    accessor-pairs: 0             # enforces getter/setter pairs in objects
    block-scoped-var: 0           # treat var statements as if they were block scoped (off by default)
    complexity: 0                 # specify the maximum cyclomatic complexity allowed in a program (off by default)
    consistent-return: 2          # require return statements to either always or never specify values
    curly: 2                      # specify curly brace conventions for all control statements
    default-case: 0               # require default case in switch statements (off by default)
    dot-location:                 # enforces consistent newlines before or after dots
        - 2
        - "property"
    dot-notation: 0               # encourages use of dot notation whenever possible
    eqeqeq: 1                     # require the use of === and !==
    guard-for-in: 1               # make sure for-in loops have an if statement (off by default)
    no-alert: 0                   # disallow the use of alert confirm and prompt
    no-caller: 2                  # disallow use of arguments.caller or arguments.callee
    no-case-declarations: 2       # disallow lexical declarations in case clauses
    no-div-regex: 0               # disallow division operators explicitly at beginning of regular expression (off by default)
    no-else-return: 2             # disallow else after a return in an if (off by default)
    no-empty-label: 0             # disallow use of labels for anything other then loops and switches
    no-empty-pattern: 2           # disallow use of empty destructuring patterns
    no-eq-null: 2                 # disallow comparisons to null without a type-checking operator (off by default)
    no-eval: 2                    # disallow use of eval()
    no-extend-native: 1           # disallow adding to native types
    no-extra-bind: 0              # disallow unnecessary function binding
    no-fallthrough: 2             # disallow fallthrough of case statements
    no-floating-decimal: 2        # disallow the use of leading or trailing decimal points in numeric literals (off by default)
    no-implicit-coercion:
        - 2
        - boolean: false
    no-implied-eval: 2            # disallow use of eval()-like methods
    no-invalid-this: 0            # disallow this keywords outside of classes or class-like objects
    no-iterator: 2                # disallow usage of __iterator__ property
    no-labels: 2                  # disallow use of labeled statements
    no-lone-blocks: 2             # disallow unnecessary nested blocks
    no-loop-func: 2               # disallow creation of functions within loops
    no-magic-numbers: 0           # disallow the use of magic numbers
    no-multi-spaces:              # disallow use of multiple spaces
        - 1
        - exceptions:
            Property: true
            VariableDeclarator: true
            AssignmentExpression: true
    no-multi-str: 0               # disallow use of multiline strings
    no-native-reassign: 2         # disallow reassignments of native objects
    no-new-func: 2                # disallow use of new operator for Function object
    no-new-wrappers: 2            # disallows creating new instances of String Number and Boolean
    no-new: 0                     # disallow use of new operator when not part of the assignment or comparison
    no-octal-escape: 2            # disallow use of octal escape sequences in string literals such as var foo = Copyright \251;
    no-octal: 2                   # disallow use of octal literals
    no-param-reassign: 0          # disallow reassignment of function parameters
    no-process-env: 1             # disallow use of process.env (off by default)
    no-proto: 2                   # disallow usage of __proto__ property
    no-redeclare: 2               # disallow declaring the same variable more then once
    no-return-assign: 2           # disallow use of assignment in return statement
    no-script-url: 2              # disallow use of javascript: urls.
    no-self-compare: 0            # disallow comparisons where both sides are exactly the same (off by default)
    no-sequences: 2               # disallow use of comma operator
    no-throw-literal: 0           # restrict what can be thrown as an exception
    no-unused-expressions: 2      # disallow usage of expressions in statement position
    no-useless-call: 0            # disallow unnecessary .call() and .apply()
    no-useless-concat: 2          # disallow unnecessary concatenation of literals or template literals
    no-void: 2                    # disallow use of void operator (off by default)
    no-warning-comments:          # disallow usage of configurable warning terms in comments e.g. TODO or FIXME (off by default)
        - 1
        - terms:
            - "FIXME"
    no-with: 2                    # disallow use of the with statement
    radix: 2                      # require use of the second argument for parseInt() (off by default)
    vars-on-top: 0                # requires to declare all vars on top of their containing scope (off by default)
    wrap-iife:                    # require immediate function invocation to be wrapped in parentheses (off by default)
        - 2
        - "inside"
    yoda: 0                       # require or disallow Yoda conditions

    ##### Strict Mode #####

    strict:
        - 2
        - "function"

    ##### Variables #####

    init-declarations: 0           # enforce or disallow variable initializations at definition
    no-catch-shadow: 0             # disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    no-delete-var: 0               # disallow deletion of variables
    no-label-var: 2                # disallow labels that share a name with a variable
    no-shadow-restricted-names: 2  # disallow shadowing of names such as arguments
    no-shadow: 0                   # disallow declaration of variables already declared in the outer scope
    no-undef-init: 2               # disallow use of undefined when initializing variables
    no-undef: 2                    # disallow use of undeclared variables unless mentioned in a /*global */ block
    no-undefined: 2                # disallow use of undefined variable (off by default)
    no-unused-vars:                # disallow declaration of variables that are not used in the code
        - 2
        - vars: 'all'
          args: 'none'
    no-use-before-define:          # disallow use of variables before they are defined
        - 2
        - "nofunc"

    ##### Node.js #####

    handle-callback-err: 0   # enforces error handling in callbacks (off by default) (on by default in the node environment)
    no-mixed-requires: 0     # disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    no-new-require: 0        # disallow use of new operator with the require function (off by default) (on by default in the node environment)
    no-path-concat: 0        # disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    no-process-exit: 0       # disallow process.exit() (on by default in the node environment)
    no-restricted-modules: 0 # restrict usage of specified node modules (off by default)
    no-sync: 0               # disallow use of synchronous methods (off by default)


    ##### Stylistic Issues #####

    array-bracket-spacing:       # enforce spacing inside array brackets
        - 2
        - "never"
    block-spacing:               # disallow or enforce spaces inside of single line blocks
        - 2
        - "always"
    brace-style:                 # enforce one true brace style (off by default)
        - 2
        - "1tbs"
    camelcase: 0                 # require camel case names
    comma-spacing:               # enforce spacing before and after comma
        - 2
        - before: false
          after: true
    comma-style: 0               # enforce one true comma style (off by default)
    consistent-this: 0           # enforces consistent naming when capturing the current execution context (off by default)
    eol-last: 2                  # enforce newline at the end of file with no multiple empty lines
    func-names: 0                # require function expressions to have a name (off by default)
    func-style: 0                # enforces use of function declarations or expressions (off by default)
    id-length: 0                 # this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
    id-match: 0                  # require identifiers to match the provided regular expression
    indent:                      # specify tab or space width for your code
        - 2
        - 4
        - SwitchCase: 1
    jsx-quotes: 0                # specify whether double or single quotes should be used in JSX attributes
    key-spacing:                 # enforces spacing between keys and values in object literal properties
        - 2
        - beforeColon: false
          afterColon: true
          mode: "minimum"
    linebreak-style:             # disallow mixed 'LF' and 'CRLF' as linebreaks
        - 2
        - "unix"
    lines-around-comment: 0      # enforce empty lines around comments
    max-depth:                   # specify the maximum depth that blocks can be nested
        - 1
        - 4
    max-len: 0                   # specify the maximum length of a line in your program
    max-nested-callbacks: 0      # specify the maximum depth callbacks can be nested (off by default)
    max-params: 0                # limits the number of parameters that can be used in the function declaration
    max-statements: 0            # specify the maximum number of statement allowed in a function
    new-cap: 1                   # require a capital letter for constructors
    new-parens: 2                # disallow the omission of parentheses when invoking a constructor with no arguments
    newline-after-var: 0         # require or disallow an empty newline after variable declarations
    no-array-constructor: 2      # disallow use of the Array constructor
    no-bitwise: 0                # disallow use of bitwise operators
    no-continue: 0               # disallow use of the continue statement
    no-inline-comments: 0        # disallow comments inline after code (off by default)
    no-lonely-if: 1              # disallow if as the only statement in an else block (off by default)
    no-mixed-spaces-and-tabs: 2  # disallow mixed spaces and tabs for indentation
    no-multiple-empty-lines:     # disallow multiple empty lines (off by default)
        - 1
        - max: 2
    no-negated-condition: 0      # disallow negated conditions
    no-nested-ternary: 0         # disallow nested ternary expressions (off by default)
    no-new-object: 2             # disallow use of the Object constructor
    no-plusplus: 0               # disallow use of unary operators, ++ and --
    no-restricted-syntax: 0      # disallow use of certain syntax in code
    no-spaced-func: 2            # disallow space between function identifier and application
    no-ternary: 0                # disallow the use of ternary operators (off by default)
    no-trailing-spaces: 2        # disallow trailing whitespace at the end of lines
    no-underscore-dangle: 0      # disallow dangling underscores in identifiers
    no-unneeded-ternary: 1       # disallow the use of ternary operators when a simpler alternative exists
    object-curly-spacing:        # require or disallow padding inside curly braces
        - 2
        - "always"
    one-var:                     # allow just one var statement per function (off by default)
        - 2
        - "never"
    operator-assignment: 0       # require assignment operator shorthand where possible or prohibit it entirely (off by default)
    operator-linebreak:          # enforce operators to be placed before or after line breaks
        - 2
        - "before"
    padded-blocks: 0             # enforce padding within blocks (off by default)
    quote-props: 0               # require quotes around object literal property names (off by default)
    quotes:                      # specify whether double or single quotes should be used
        - 2
        - "single"
        - "avoid-escape"
    require-jsdoc: 0             # require JSDoc comment
    semi-spacing:                # enforce spacing before and after semicolons
        - 2
        - before: false
          after: true
    semi:                        # require or disallow use of semicolons instead of ASI
        - 2
        - "always"
    sort-vars: 0                 # sort variables within the same declaration block (off by default)
    space-after-keywords: 2      # require a space after certain keywords (off by default)
    space-before-blocks: 2       # require or disallow space before blocks (off by default)
    space-before-function-paren: # require or disallow a space before function opening parenthesis
        - 2
        - anonymous: "always"
          named: "never"
    space-before-keywords: 2     # require a space before certain keywords
    space-in-parens:             # require or disallow spaces inside parentheses (off by default)
        - 2
        - "never"
    space-infix-ops: 2           # require spaces around operators
    space-return-throw-case: 2   # require a space after return throw and case
    space-unary-ops: 0           # Require or disallow spaces before/after unary operators (words on by default nonwords off by default)
    spaced-comment: 0            # require or disallow a space immediately following the # in a line comment (off by default)
    wrap-regex: 0                # require regex literals to be wrapped in parentheses (off by default)

    ##### ECMAScript 6 #####

    no-var: 0          # require let or const instead of var (off by default)
    generator-star: 0  # enforce the position of the * in generator functions (off by default)

    ##### Legacy #####

    max-depth: 0       # specify the maximum depth that blocks can be nested (off by default)
    max-len: 0         # specify the maximum length of a line in your program (off by default)
    max-params: 0      # limits the number of parameters that can be used in the function declaration. (off by default)
    max-statements: 0  # specify the maximum number of statement allowed in a function (off by default)
    no-bitwise: 0      # disallow use of bitwise operators (off by default)
    no-plusplus: 0     # disallow use of unary operators ++ and -- (off by default)
